import { Markup, Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'

import { isValidImage } from '../../helpers/images'
import { isRussian } from '@/helpers/language'
import { BOT_TOKEN } from '@/core/bot'
import { handleHelpCancel } from '@/handlers/handleHelpCancel'

export const trainFluxModelWizard = new Scenes.WizardScene<MyContext>(
  'trainFluxModelWizard',

  async ctx => {
    console.log('CASE 2 ctx.session.steps', ctx.session.steps)
    const isRu = isRussian(ctx)
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const message = ctx.message as any
    console.log('CASE: trainFluxModelWizard', message)
    if (message && 'text' in message) {
      const args = message.text?.split(' ')
      console.log('args', args)
      let targetUserId: string
      let username: string | undefined

      if (args && args.length > 1 && /^\d+$/.test(args[1])) {
        targetUserId = args[1]
        if (!/^\d+$/.test(targetUserId)) {
          await ctx.reply(
            isRu
              ? '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.'
              : '‚ùå Invalid Telegram ID format.'
          )
          return ctx.scene.leave()
        }
        if (args.length > 2) {
          username = args[2]
        }
      } else {
        if (!ctx.from) {
          await ctx.reply(
            isRu
              ? '‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
              : '‚ùå User identification error.'
          )
          return ctx.scene.leave()
        }
        targetUserId = ctx.from.id.toString()
        username = ctx.from.username
      }

      if (!username) {
        await ctx.reply(
          isRu
            ? '‚ùå –î–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram'
            : '‚ùå You need to set a username in Telegram settings to train a model'
        )
        return ctx.scene.leave()
      }

      ctx.session.images = []
      ctx.session.modelName = `${username.toLowerCase()}`
      ctx.session.targetUserId = Number(targetUserId)
      ctx.session.username = username
      ctx.session.triggerWord = `${username.toLowerCase()}`

      await ctx.reply(
        isRu
          ? `üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (–º–∏–Ω–∏–º—É–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π). –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.\n\n–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n
   - üì∑ <b>–ß–µ—Ç–∫–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b> –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–∏–º–∏ –∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏.\n
   - üîÑ <b>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–∞–∫—É—Ä—Å–æ–≤:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤.\n
   - üòä <b>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –ª–∏—Ü:</b> –í–∫–ª—é—á–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ª–∏—Ü.\n
   - üí° <b>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –æ—Å–≤–µ—â–µ–Ω–∏—è.\n
   - üèûÔ∏è <b>–§–æ–Ω –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:</b> –§–æ–Ω –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º.\n
   - üëó <b>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å—Ç–∏–ª–µ–π –æ–¥–µ–∂–¥—ã:</b> –í–∫–ª—é—á–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Ä—è–¥–∞—Ö.\n
   - üéØ <b>–õ–∏—Ü–æ –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞–¥—Ä–∞:</b> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–µ –ª–∏—Ü–æ –∑–∞–Ω–∏–º–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n
   - üö´ <b>–ú–∏–Ω–∏–º—É–º –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> –ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Å–∏–ª—å–Ω–æ–π –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–æ–π.\n
   - ‚è≥ <b>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤:</b> –í–∫–ª—é—á–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã.\n\n`
          : `üì∏ Please send images for model training (minimum 10 images). Send /done when finished.\n\nYou will need at least 10 photos that meet the following criteria:\n
   - üì∑ <b>Clear and high-quality image:</b> Photos should be clear and of high quality.\n
   - üîÑ <b>Variety of angles:</b> Use photos taken from different angles.\n
   - üòä <b>Variety of facial expressions:</b> Include photos with different facial expressions.\n
   - üí° <b>Variety of lighting conditions:</b> Use photos taken under different lighting conditions.\n
   - üèûÔ∏è <b>Background and environment:</b> The background in the photos should be neutral.\n
   - üëó <b>Variety of clothing styles:</b> Include photos in different outfits.\n`,
        {
          reply_markup: {
            keyboard: [
              [
                {
                  text: isRu ? '–û—Ç–º–µ–Ω–∏—Ç—å' : 'Cancel',
                },
              ],
            ],
          },
          parse_mode: 'HTML',
        }
      )
    }
    console.log('Proceeding to image upload step')
    ctx.wizard.next()
    return
  },
  async ctx => {
    console.log('Scene: IMAGES')
    const isRu = isRussian(ctx)
    const message = ctx.message
    console.log('message', message)
    const isCancel = await handleHelpCancel(ctx)
    if (isCancel) {
      return ctx.scene.leave()
    }

    if (message && 'text' in message && message.text === '/done') {
      console.log('Received /done command')
      if (ctx.session.images.length < 10) {
        await ctx.reply(
          isRu
            ? `üì∏ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –°–µ–π—á–∞—Å: ${ctx.session.images.length}`
            : `üì∏ Minimum 10 images required. Current: ${ctx.session.images.length}`
        )
        return
      }
      console.log('Proceeding to next step')
      ctx.scene.enter('uploadTrainFluxModelScene')
      console.log('Moved to ZIP scene')
      return
    }

    if (message && 'photo' in message) {
      const photo = message.photo[message.photo.length - 1]
      const file = await ctx.telegram.getFile(photo.file_id)

      if (!file.file_path) {
        await ctx.reply(
          isRu ? '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞' : '‚ùå Error getting file'
        )
        return
      }

      console.log('File path:', file.file_path)

      const response = await fetch(
        `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`
      )
      const buffer = Buffer.from(await response.arrayBuffer())

      console.log('Buffer length:', buffer.length)
      console.log('Buffer content:', buffer.slice(0, 20)) // –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 20 –±–∞–π—Ç

      const isValid = await isValidImage(buffer)
      console.log('Is valid image:', isValid)

      if (!isValid) {
        await ctx.reply(
          isRu
            ? '‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
            : '‚ùå File is not a valid image. Please send another image.'
        )
        return
      }

      const MAX_IMAGE_SIZE = 10 * 1024 * 1024 // 10 MB
      if (buffer.length > MAX_IMAGE_SIZE) {
        await ctx.reply(
          isRu
            ? '‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB'
            : '‚ùå Image is too large. Maximum size: 10MB'
        )
        return
      }

      ctx.session.images.push({
        buffer: Buffer.from(buffer),
        filename: `a_photo_of_${ctx.session.username}x${
          ctx.session.images.length + 1
        }.jpg`,
      })

      await ctx.reply(
        isRu
          ? `‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${ctx.session.images.length} –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`
          : `‚úÖ Image ${ctx.session.images.length} added. Send more or /done to finish`
      )
      console.log(`Image ${ctx.session.images.length} added`)
    }
  }
)

export default trainFluxModelWizard
