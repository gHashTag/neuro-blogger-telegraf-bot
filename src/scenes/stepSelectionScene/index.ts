import { Markup, Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'
import { getStepSelectionMenu } from '../../menu/getStepSelectionMenu'
import { isRussian } from '@/helpers/language'
import { handleTrainingCost } from '@/price/helpers'
import { mainMenu } from '@/menu'

export const stepSelectionScene = new Scenes.WizardScene<MyContext>(
  'stepSelectionScene',
  async ctx => {
    const isRu = isRussian(ctx)
    await ctx.reply(
      isRu
        ? 'üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.\n\nüìà –ß–µ–º –±–æ–ª—å—à–µ —à–∞–≥–æ–≤, —Ç–µ–º –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å –¥–æ—Ä–æ–∂–µ. üí∞'
        : 'üî¢ Please select the number of steps for model training.\n\nüìà The more steps, the better the quality, but it will be more expensive. üí∞',
      getStepSelectionMenu(isRu)
    )
    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = isRussian(ctx)
    console.log('Entering step 2 of the wizard')
    if (ctx.message && 'text' in ctx.message) {
      const messageText = ctx.message.text
      const stepsMatch = messageText.match(/\d+/)
      console.log('stepsMatch', stepsMatch)
      if (stepsMatch) {
        const steps = parseInt(stepsMatch[0])
        ctx.session.steps = steps
        console.log('Parsed steps:', steps)
        const { leaveScene, trainingCostInStars, currentBalance } =
          await handleTrainingCost(ctx, steps, isRu)
        if (leaveScene) {
          return ctx.scene.leave()
        } else {
          const message = isRu
            ? `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ ${steps} —à–∞–≥–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é ${trainingCostInStars}‚≠êÔ∏è –∑–≤–µ–∑–¥\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance} ‚≠êÔ∏è`
            : `‚úÖ You selected ${steps} steps costing ${trainingCostInStars}‚≠êÔ∏è stars\n\nYour balance: ${currentBalance} ‚≠êÔ∏è`

          await ctx.reply(message, Markup.removeKeyboard())
          return ctx.scene.enter('trainFluxModelWizard')
        }
      }
    } else {
      console.error('Callback query does not contain data')
    }

    if (ctx.message && 'text' in ctx.message && ctx.message.text === '–û—Ç–º–µ–Ω–∞') {
      await ctx.reply(isRu ? '‚ùå –û—Ç–º–µ–Ω–∞' : '‚ùå Cancel', {
        reply_markup: {
          keyboard: mainMenu(isRu).reply_markup.keyboard,
        },
      })
      return ctx.scene.leave()
    }

    await ctx.reply(
      isRu
        ? 'üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.'
        : 'üî¢ Please select the number of steps to proceed with model training.'
    )
  }
)
