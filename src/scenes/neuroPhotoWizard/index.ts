import { Scenes } from 'telegraf'
import { ModelUrl, MyContext, UserModel } from '../../interfaces'

import {
  imageNeuroGenerationCost,
  sendInsufficientStarsMessage,
  sendBalanceMessage,
} from '@/price/helpers'
import { generateNeuroImage } from '@/services/generateNeuroImage'
import { getLatestUserModel, getUserBalance } from '@/core/supabase'
import {
  mainMenu,
  sendGenerationCancelledMessage,
  sendPhotoDescriptionRequest,
} from '@/menu'

export const neuroPhotoWizard = new Scenes.WizardScene<MyContext>(
  'neuroPhotoWizard',
  async ctx => {
    console.log('CASE: neuroPhotoConversation')
    const isRu = ctx.from?.language_code === 'ru'
    const userId = ctx.from?.id

    if (!userId) {
      await ctx.reply(
        isRu
          ? '‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          : '‚ùå User identification error'
      )
      return ctx.scene.leave()
    }

    const currentBalance = await getUserBalance(userId)

    if (currentBalance < imageNeuroGenerationCost) {
      await sendInsufficientStarsMessage(userId, currentBalance, isRu)
      return ctx.scene.leave()
    }

    await sendBalanceMessage(
      userId,
      currentBalance,
      imageNeuroGenerationCost,
      isRu
    )

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userModel = await getLatestUserModel(userId)

    console.log(userModel, 'userModel')

    if (!userModel || !userModel.model_url) {
      await ctx.reply(
        isRu
          ? '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ –∞–≤–∞—Ç–∞—Ä–∞", –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –ò–ò –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ –≤–∞—à–∏–º –ª–∏—Ü–æ–º. '
          : "‚ùå You don't have any trained models.\n\nUse the 'ü§ñ  Digital avatar body' command in the main menu to create your AI model for generating neurophotos with your face.",
        {
          reply_markup: {
            keyboard: mainMenu(isRu).reply_markup.keyboard,
          },
        }
      )

      return ctx.scene.leave()
    }

    ctx.session.userModel = userModel as UserModel

    ctx.session.mode = 'neuro_photo'

    await sendPhotoDescriptionRequest(ctx, isRu, 'neuro_photo')

    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = ctx.from?.language_code === 'ru'
    const promptMsg = ctx.message

    if (promptMsg && 'text' in promptMsg) {
      const promptText = promptMsg.text

      if (promptText === (isRu ? '–û—Ç–º–µ–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é' : 'Cancel generation')) {
        await sendGenerationCancelledMessage(ctx, isRu)
        return ctx.scene.leave()
      }

      console.log(promptText, 'promptText')
      console.log(ctx.session.userModel, 'ctx.session.userModel')
      ctx.session.prompt = promptText
      const model_url = ctx.session.userModel.model_url as ModelUrl
      const trigger_word = ctx.session.userModel.trigger_word as string

      // –î–æ–±–∞–≤–ª—è–µ–º trigger word –∫ –ø—Ä–æ–º–ø—Ç—É
      const userId = ctx.from?.id

      if (model_url && trigger_word) {
        console.log(model_url, 'model_url')
        const fullPrompt = `Fashionable ${trigger_word}, ${promptText}`
        await generateNeuroImage(fullPrompt, model_url, 1, userId || 0, ctx)
      } else {
        await ctx.reply(isRu ? '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç' : '‚ùå Invalid prompt')
      }
    }

    return ctx.scene.leave()
  }
)
