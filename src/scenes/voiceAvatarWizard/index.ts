import { Markup, Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'
import { generateVoiceAvatar } from '../../services/generateVoiceAvatar'
import { isRussian } from '@/helpers'
import {
  sendInsufficientStarsMessage,
  getUserBalance,
  sendBalanceMessage,
} from '../../helpers/telegramStars/'
import { voiceConversationCost } from '../../helpers/telegramStars/calculateFinalPrice'

export const voiceAvatarWizard = new Scenes.WizardScene<MyContext>(
  'voiceAvatarWizard',
  async ctx => {
    const isRu = isRussian(ctx)
    if (!ctx.from?.id) {
      await ctx.reply(
        isRu ? '–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : 'User identification error'
      )
      return ctx.scene.leave()
    }

    const currentBalance = await getUserBalance(ctx.from.id)
    const price = voiceConversationCost
    if (currentBalance < price) {
      await sendInsufficientStarsMessage(ctx, isRu)
      return ctx.scene.leave()
    }

    await sendBalanceMessage(currentBalance, price, ctx, isRu)

    await ctx.reply(
      isRu
        ? 'üéôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞'
        : 'üéôÔ∏è Please send a voice message to create your voice avatar',
      Markup.keyboard([
        [Markup.button.text(isRu ? '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' : '‚ùå Cancel')],
      ])
    )

    return ctx.wizard.next()
  },
  async ctx => {
    const isRu = isRussian(ctx)
    const message = ctx.message

    if (
      !message ||
      !('voice' in message || 'audio' in message || 'text' in message)
    ) {
      await ctx.reply(
        isRu
          ? 'üéôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
          : 'üéôÔ∏è Please send a voice message'
      )
      return
    }

    if (
      'text' in message &&
      message.text === (isRu ? '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' : '‚ùå Cancel')
    ) {
      await ctx.reply(isRu ? '‚ùå –û–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ' : '‚ùå Training cancelled')
      return ctx.scene.leave()
    }

    const fileId =
      'voice' in message
        ? message.voice.file_id
        : 'audio' in message
        ? message.audio.file_id
        : undefined
    if (!fileId) {
      await ctx.reply(
        isRu
          ? '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞'
          : 'Error: could not retrieve file ID'
      )
      return ctx.scene.leave()
    }

    try {
      const file = await ctx.telegram.getFile(fileId)
      if (!file.file_path) {
        throw new Error('File path not found')
      }

      const fileUrl = `https://api.telegram.org/file/bot${ctx.telegram.token}/${file.file_path}`
      await generateVoiceAvatar(fileUrl, ctx.from.id, ctx, isRu)
    } catch (error) {
      console.error('Error in handleVoiceMessage:', error)
      await ctx.reply(
        isRu
          ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          : '‚ùå An error occurred while creating the voice avatar. Please try again later.'
      )
    }

    return ctx.scene.leave()
  }
)

export default voiceAvatarWizard
