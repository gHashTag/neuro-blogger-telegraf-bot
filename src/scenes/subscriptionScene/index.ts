import { Markup, Scenes } from 'telegraf'
import { MyContext } from '../../interfaces'
import { isRussian } from '@/helpers'

export const subscriptionScene = new Scenes.WizardScene<MyContext>(
  'subscriptionScene',
  async ctx => {
    const isRu = isRussian(ctx)
    const message = isRu
      ? `<b>üí´ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –Ω–µ–π—Ä–æ–∫–æ–º–∞–Ω–¥–∞–º, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ—Å—è—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b>

<b>üìö –ù–µ–π—Ä–æ–ë–∞–∑–∞ - –¶–µ–Ω–∞: 7000 ‚≠êÔ∏è</b>
- üìñ –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º —Å –ò–ò –∞–≤–∞—Ç–∞—Ä–æ–º
- ‚è∞ –£—á–∏—Ç–µ—Å—å –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è
- üé• –í–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏, —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
- üí¨ –î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É —Å –º–µ–Ω—Ç–æ—Ä–æ–º
- ‚≠êÔ∏è 1000 –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞


<b>üß† –ù–µ–π—Ä–æ–í—Å—Ç—Ä–µ—á–∞ - –¶–µ–Ω–∞: 44000 ‚≠êÔ∏è</b>
- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º
- –û–±—Å—É–∂–¥–µ–Ω–∏–µ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∏–¥–µ–π
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ò–ò —Å –≤–∞—à–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
- ‚≠êÔ∏è 5000 –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞


<b>ü§ñ –ù–µ–π—Ä–æ–ë–ª–æ–≥–µ—Ä - –¶–µ–Ω–∞: 75000 ‚≠êÔ∏è</b>
- –í—Å–µ –∏–∑ —Ç–∞—Ä–∏—Ñ–∞ –ù–µ–π—Ä–æ–ë–∞–∑–∞
- –û–±—É—á–µ–Ω–∏–µ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º —Å –º–µ–Ω—Ç–æ—Ä–æ–º
- –ö—É—Ä—Å –Ω–∞ 1 –º–µ—Å—è—Ü —Å 4 –æ–Ω–ª–∞–π–Ω —É—Ä–æ–∫–∞–º–∏ –ø–æ 2 —á–∞—Å–∞
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è, –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
- ‚≠êÔ∏è 7500 –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞
`
      : `<b>üí´ To get full access to all neurocommands, choose one of the proposed monthly subscriptions:</b>

      <b>üìö NeuroBase - –¶–µ–Ω–∞: 7000 ‚≠êÔ∏è</b>
- Self-study on neural networks with AI avatar
- Learn at your convenience
- Includes video lessons, text materials
- Support and up-to-date technologies
- Access to chat with a mentor
- ‚≠êÔ∏è 1000 on bot balance

<b>üß† NeuroMeeting - –¶–µ–Ω–∞: 44000 ‚≠êÔ∏è</b>
- Individual meeting with an expert
- Discussion of your projects and ideas
- Personal recommendations and strategies
- Access to exclusive materials
- AI integration with your projects
- ‚≠êÔ∏è 5000 on bot balance

<b>ü§ñ NeuroBlogger - –¶–µ–Ω–∞: 75000 ‚≠êÔ∏è</b>
- Everything from the NeuroBase plan
- Training on neural networks with a mentor
- 1-month course with 4 online lessons of 2 hours each
- Practical classes, homework, and curator support
- ‚≠êÔ∏è 7500 on bot balance
`

    const inlineKeyboard = Markup.inlineKeyboard([
      [
        {
          text: isRu ? 'üìö –ù–µ–π—Ä–æ–ë–∞–∑–∞' : 'üìö NeuroBase',
          callback_data: 'neurobase',
        },
        {
          text: isRu ? 'üß† –ù–µ–π—Ä–æ–í—Å—Ç—Ä–µ—á–∞' : 'üß† NeuroMeeting',
          callback_data: 'neuromeeting',
        },
        {
          text: isRu ? 'ü§ñ –ù–µ–π—Ä–æ–ë–ª–æ–≥–µ—Ä' : 'ü§ñ NeuroBlogger',
          callback_data: 'neuroblogger',
        },
      ],
    ])

    await ctx.reply(message, {
      reply_markup: inlineKeyboard.reply_markup,
      parse_mode: 'HTML',
    })

    return ctx.wizard.next()
  },
  async ctx => {
    console.log('CASE: subscriptionScene.next')
    if ('callback_query' in ctx.update && 'data' in ctx.update.callback_query) {
      const text = ctx.update.callback_query.data
      console.log('text', text)
      if (text === 'neurobase') {
        console.log('CASE: üìö –ù–µ–π—Ä–æ–ë–∞–∑–∞')
        ctx.session.subscription = 'neurobase'
        return ctx.scene.enter('paymentScene')
      } else if (text === 'neuromeeting') {
        console.log('CASE: üß† –ù–µ–π—Ä–æ–í—Å—Ç—Ä–µ—á–∞')
        ctx.session.subscription = 'neuromeeting'
        return ctx.scene.enter('paymentScene')
      } else if (text === 'neuroblogger') {
        console.log('CASE: ü§ñ –ù–µ–π—Ä–æ–ë–ª–æ–≥–µ—Ä')
        ctx.session.subscription = 'neuroblogger'
        return ctx.scene.enter('paymentScene')
      }
    } else {
      return ctx.scene.leave()
    }
  }
)
