import { Context } from 'telegraf'
import { isRussian } from '@/helpers'
import { getUid, incrementBalance, setPayments } from '@/core/supabase'
import { handleBuy } from '@/handlers'

export async function handlePaymentPolicyInfo(ctx: Context) {
  const isRu = ctx.from?.language_code === 'ru'
  await ctx.answerCbQuery() // –ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
  await ctx.reply(
    isRu
      ? `üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É Robokassa\n\nüì¶ –£—Å–ª—É–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –æ–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ –≤–µ–±–∏–Ω–∞—Ä—ã, –±–æ—Ç—ã –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\nüîÑ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —É—Å–ª—É–≥–∞ –Ω–µ –±—ã–ª–∞ –æ–∫–∞–∑–∞–Ω–∞.\n\n–ò–ü –ö–∞–º—Å–∫–∞—è –ì–µ—è –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞\n–ò–ù–ù: 711613594921\n–û–ì–†–ù/–û–ì–†–ù–ò–ü: 317715400010572\n\nüìù –ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –ú—ã —Å–æ–±–ª—é–¥–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–ó "–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö" –æ—Ç 27.07.2006 N 152-–§–ó.`
      : `üí≥ Payment is processed through the Robokassa system\n\nüì¶ Services are provided online through webinars, bots, and consultations.\n\nüîÑ Refunds are possible within 14 days of payment if the service was not provided.\n\nIP Kamskaya Geya Viktorovna\nINN: 711613594921\nOGRN/OGRNIP: 317715400010572\n\nüìù Personal data processing policy: We comply with the requirements of the Federal Law "On Personal Data" dated 27.07.2006 N 152-FZ.`
  )
}

export async function handleTopUp(ctx) {
  const data = ctx.match[0]
  console.log('data', data)
  const isRu = ctx.from?.language_code === 'ru'
  await handleBuy({ ctx, data, isRu })
}

export async function handlePreCheckoutQuery(ctx: Context) {
  await ctx.answerPreCheckoutQuery(true)
}

export async function handleSuccessfulPayment(ctx) {
  if (!ctx.chat) {
    console.error('Update does not belong to a chat')
    return
  }
  const isRu = isRussian(ctx)

  // –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç
  const stars = ctx.message.successful_payment.total_amount

  if (!ctx.from?.id) throw new Error('No telegram id')
  const { inviter_id } = await getUid(ctx.from.id.toString())
  if (!inviter_id) throw new Error('No user_id')

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
  await incrementBalance({ telegram_id: ctx.from.id.toString(), amount: stars })

  await ctx.reply(
    isRu
      ? `üí´ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${stars}‚≠êÔ∏è –∑–≤–µ–∑–¥!`
      : `üí´ Your balance has been replenished by ${stars}‚≠êÔ∏è stars!`
  )

  const Email = ctx.from.email
  const OutSum = stars
  const user_id = ctx.from.id

  await setPayments({
    user_id,
    OutSum,
    currency: 'STARS',
    stars,
    email: Email,
    payment_method: 'Telegram',
  })
  await ctx.telegram.sendMessage(
    '-1001978334539',
    `üí´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from.username} (ID: ${ctx.from.id}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ ${stars} –∑–≤–µ–∑–¥!`
  )
}
