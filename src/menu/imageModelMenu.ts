import { Markup } from 'telegraf'
import { MyContext } from '@/interfaces'
import { imageModelPrices } from '@/price'

export async function imageModelMenu(ctx: MyContext) {
  const isRu = ctx.from?.language_code === 'ru'

  // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å 'dev' –∏–ª–∏ 'image' –≤ inputType
  const filteredModels = Object.values(imageModelPrices).filter(
    model =>
      !model.inputType.includes('dev') && model.inputType.includes('image')
  )

  // –ï—Å–ª–∏ —Ä–µ–∂–∏–º 'text_to_image', —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç 'text'
  const modelsForMenu =
    ctx.session.mode === 'text_to_image'
      ? filteredModels.filter(model => model.inputType.includes('text'))
      : filteredModels

  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ shortName –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
  const modelButtons = modelsForMenu.map(model =>
    Markup.button.text(model.shortName)
  )

  // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–∂–¥–æ–π
  const keyboardButtons = []
  for (let i = 0; i < modelButtons.length; i += 2) {
    keyboardButtons.push(modelButtons.slice(i, i + 2))
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
  keyboardButtons.push([
    Markup.button.text(isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel'),
    Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu'),
  ])

  const keyboard = Markup.keyboard(keyboardButtons).resize()

  await ctx.reply(
    isRu
      ? 'üé® –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:'
      : 'üé® Choose a model for generation:',
    {
      reply_markup: keyboard.reply_markup,
    }
  )
}
